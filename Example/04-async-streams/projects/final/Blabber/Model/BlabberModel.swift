import Foundation
import CoreLocation
import Combine
import UIKit

// The app model that communicates with the server.
class BlabberModel: ObservableObject {
  var loginUser = ""
  var urlSession = URLSession.shared
  
  init() { }
  
  /// Current live updates
  @Published var messages: [Message] = []
  
  /// Shares the current user's address in chat.
  func shareLocation() async throws { }
  
  /// Does a countdown and sends the message.
  func countdown(to message: String) async throws {
    guard !message.isEmpty else { return }
    
    /*
     An asynchronous sequence generated from a closure that calls a continuation to produce new elements.

     struct AsyncStream<Element>

     AsyncStream conforms to AsyncSequence, providing a convenient way to create an asynchronous sequence without manually implementing an asynchronous iterator. In particular, an asynchronous stream is well-suited to adapt callback- or delegation-based APIs to participate with async-await.
     You initialize an AsyncStream with a closure that receives an AsyncStream.Continuation.
     Produce elements in this closure, then provide them to the stream by calling the continuation‚Äôs yield(_:) method.
     When there are no further elements to produce, call the continuation‚Äôs finish() method. This causes the sequence iterator to produce a nil, which terminates the sequence. The continuation conforms to Sendable, which permits calling it from concurrent contexts external to the iteration of the AsyncStream.
     An arbitrary source of elements can produce elements faster than they are consumed by a caller iterating over them. Because of this, AsyncStream defines a buffering behavior, allowing the stream to buffer a specific number of oldest or newest elements. By default, the buffer limit is Int.max, which means the value is unbounded.
     */
    let counter = AsyncStream<String> { continuation in
      var countdown = 3
      Timer.scheduledTimer(
        withTimeInterval: 1.0,
        repeats: true
      ) { timer in
        guard countdown > 0 else {
          timer.invalidate()
          // yield with result, ‰ºöÂú®ËæìÂá∫ÊúÄÂêéÁöÑ‰∏Ä‰∏™ÂÄºÂêé, ËøõË°å Finish ÁöÑÊìç‰Ωú.
          continuation.yield(with: .success("üéâ " + message))
          return
        }
        
        continuation.yield("\(countdown) ...")
        countdown -= 1
      }
    }
    
    try await counter.forEach {
      try await self.say($0)
    }
  }
  
  /// Start live chat updates
  @MainActor
  func startChat() async throws {
    guard
      let query = loginUser.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed),
      let url = URL(string: "http://localhost:8080/chat/room?\(query)")
    else {
      throw "Invalid username"
    }
    
    let (stream, response) = try await liveURLSession.bytes(from: url, delegate: nil)
    guard (response as? HTTPURLResponse)?.statusCode == 200 else {
      throw "The server responded with an error."
    }
    
    print("Start live updates")
    
    /*
     Summary

     Execute an operation with a cancellation handler that‚Äôs immediately invoked if the current task is canceled.
     Declaration

     func withTaskCancellationHandler<T>(handler: @Sendable () -> Void,
                                    operation: () async throws -> T) async rethrows -> T
     This differs from the operation cooperatively checking for cancellation and reacting to it in that the cancellation handler is always and immediately invoked when the task is canceled. For example, even if the operation is running code that never checks for cancellation, a cancellation handler still runs and provides a chance to run some cleanup code.
     Doesn‚Äôt check for cancellation, and always executes the passed operation.
     This function returns immediately and never suspends.

     */
    // withTaskCancellationHandler ‰∏≠, Áî®Êù•Ê∑ªÂä†ÂΩì Task ÂèñÊ∂àÁöÑÊó∂ÂÄô, Â∫îËØ•Ëß¶ÂèëÁöÑÈÄªËæë.
    try await withTaskCancellationHandler {
      print("End live updates")
      messages = []
    } operation: {
      try await readMessages(stream: stream)
    }
  }
  
  /// Reads the server chat stream and updates the data model.
  @MainActor
  private func readMessages(stream: URLSession.AsyncBytes) async throws {
    var iterator = stream.lines.makeAsyncIterator()
    
    guard let first = try await iterator.next() else {
      throw "No response from server"
    }
    // Á¨¨‰∏Ä‰∏™Â≠óËäÇ, ‰ºöÊòØÂú®Á∫ø‰∫∫Êï∞.
    guard let data = first.data(using: .utf8),
          let status = try? JSONDecoder()
      .decode(ServerStatus.self, from: data) else {
      throw "Invalid response from server"
    }
    
    messages.append(
      Message(
        message: "\(status.activeUsers) active users"
      )
    )
    
    let notifications = Task {
      await startObserveAppStatus()
    }
    
    // ÂΩì, ‰ªªÂä°Êé®Âá∫ÁöÑÊó∂ÂÄô, ËøõË°å Task ÁöÑÂèñÊ∂à.
    // ËøôÈáåÊúâÁÇπÈóÆÈ¢òÂïä, ‰∏∫‰ªÄ‰πà notifications ÁöÑÂèñÊ∂àÂä®‰Ωú, ÂèØ‰ª•ÂΩ±ÂìçÂà∞ÈáåÈù¢ÁîüÊàêÁöÑ Task.
    defer {
      notifications.cancel()
    }
    
    for try await line in stream.lines {
      if let data = line.data(using: .utf8),
         let update = try? JSONDecoder().decode(Message.self, from: data) {
        messages.append(update)
      }
    }
  }
  
  // ÂèëÈÄÅËÅäÂ§©Ê∂àÊÅØ, Âà∞ÊúçÂä°Âô®Á´Ø.
  func say(_ text: String, isSystemMessage: Bool = false) async throws {
    guard
      !text.isEmpty,
      let url = URL(string: "http://localhost:8080/chat/say")
    else { return }
    
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.httpBody = try JSONEncoder().encode(
      Message(id: UUID(), user: isSystemMessage ? nil : loginUser, message: text, date: Date())
    )
    
    let (_, response) = try await urlSession.data(for: request, delegate: nil)
    guard (response as? HTTPURLResponse)?.statusCode == 200 else {
      throw "The server responded with an error."
    }
  }
  
  // Âú®ËøôÂºÄÂêØ‰∫Ü‰∏§‰∏™ÂºÇÊ≠•‰ªªÂä°, ËøõË°åÂâçÂêéÂè∞ÂàáÊç¢ÁöÑÁõëÂê¨.
  func startObserveAppStatus() async {
    // Ëøô‰∏§‰∏™‰ªªÂä°, ‰∏ç‰ºöÈöèÁùÄÂ§ñÂ±Ç Task cancel ËøõË°åÂèñÊ∂à.
    // ÊâÄ‰ª•ËøôÈáåÊúâ Bug. ‰ΩøÁî® Task ÂºÄÂêØÁöÑÊñ∞ÁöÑÂºÇÊ≠•‰∏ä‰∏ãÊñá, ÁÑ∂ÂêéÈáåÈù¢‰ΩøÁî® for Êù•ÁõëÂê¨‰∫Ü‰∏Ä‰∏™Êó†ÈôêÂ∫èÂàó, ÂØºËá¥ÁöÑÈóÆÈ¢òÂ∞±ÊòØ, ËøôÈáåÁöÑÁõëÂê¨, ÂÖ∂ÂÆûÊòØÊ∞∏Ëøú‰∏ç‰ºöÁªìÊùüÁöÑ.
    Task {
      for await _ in await NotificationCenter.default
        .notifications(for: UIApplication.willResignActiveNotification) {
        // ÊØèÂΩì‰∏Ä‰∏™ÈÄöÁü•ÂèëÂá∫‰πãÂêé, ËøõË°åÂØπÂ∫îÁöÑÊúçÂä°Âô®ËØ∑Ê±Ç.
        try? await say("\(loginUser) went away", isSystemMessage: true)
      }
    }
    
    Task {
      for await _ in await NotificationCenter.default
        .notifications(for: UIApplication.didBecomeActiveNotification) {
        try? await say("\(loginUser) came back", isSystemMessage: true)
      }
    }
  }
  
  /// A URL session that goes on indefinitely, receiving live updates.
  private var liveURLSession: URLSession = {
    var configuration = URLSessionConfiguration.default
    // Âú®ËøôÈáå, Â∞ÜË∂ÖÊó∂Êó∂Èó¥, ËÆæÁΩÆÂà∞Êó†ÈôêÂ§ß.
    configuration.timeoutIntervalForRequest = .infinity
    return URLSession(configuration: configuration)
  }()
}

extension AsyncSequence {
  // Ëøô‰∏çÊòØ‰∏Ä‰∏™ Container, ‰ªÖ‰ªÖÊòØ‰∏Ä‰∏™ÊñπÊ≥ï, Áî®Êù•Â∞ÅË£Ö forin ÁöÑÈÄªËæë. 
  func forEach(_ body: (Element) async throws -> Void) async throws {
    for try await element in self {
      try await body(element)
    }
  }
}
